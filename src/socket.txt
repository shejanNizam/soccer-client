01. এই হুকটি একটি সকার্ট কানেকশন তৈরি করে (সকার্ট আইও ক্লায়েন্ট ব্যবহার করে) এবং ব্যাকএন্ড থেকে "newNotification" ইভেন্ট এলে একটি কলব্যাক ফাংশনকে কল করে। এই কলব্যাক ফাংশনের মাধ্যমে আপনি আপনার UI-তে নতুন নোটিফিকেশন যুক্ত করতে পারবেন।

-------------------------- start ---------------------------------->>
"use client";

import { useEffect, useMemo } from "react";
import { io, Socket } from "socket.io-client";

const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL!;

export const useSocket = (onNewNotification: (notification: any) => void) => {
  // একাধিক কানেকশন এড়াতে useMemo ব্যবহার করা হচ্ছে
  const socket: Socket = useMemo(() => io(SOCKET_URL), []);

  useEffect(() => {
    socket.on("connect", () => {
      console.log("Socket connected:", socket.id);
    });

    // ব্যাকএন্ড থেকে "newNotification" ইভেন্টের মাধ্যমে নতুন নোটিফিকেশন পাওয়ার জন্য লিসেন করা হচ্ছে
    socket.on("newNotification", (notification) => {
      console.log("New notification received:", notification);
      onNewNotification(notification);
    });

    // কম্পোনেন্ট আনমাউন্ট হলে ক্লিনআপ করা হচ্ছে
    return () => {
      socket.off("newNotification");
      socket.disconnect();
    };
  }, [socket, onNewNotification]);

  return socket;
};

-------------------------- end ---------------------------------->>

02. এখানে আমরা একটি নতুন মিউটেশন (markAllRead) যোগ করেছি, যা ব্যাকএন্ডের PATCH API কল করে সব নোটিফিকেশন রিড হিসাবে চিহ্নিত করে। এই মিউটেশন চালানোর পর, ট্যাগ ইনভ্যালিডেশনের মাধ্যমে RTK Query স্বয়ংক্রিয়ভাবে নতুন ডেটা ফেচ করে (যেমন, নোটিফিকেশন কাউন্ট আপডেট করে)।

-------------------------- start ---------------------------------->>
import baseApi from "@/redux/api/baseApi/baseApi";

export const notificationsApi = baseApi.injectEndpoints({
  endpoints: (builder) => ({
    // সব নোটিফিকেশন পাওয়ার জন্য
    allNotifications: builder.query({
      query: () => ({
        url: "/notification",
        method: "GET",
      }),
      providesTags: ["notification"],
    }),
    // আনসিন (অপ্রত্যক্ষ) নোটিফিকেশনের সংখ্যা পাওয়ার জন্য
    notificationCount: builder.query({
      query: () => ({
        url: "/notification/count",
        method: "GET",
      }),
      providesTags: ["notification"],
    }),
    // সব নোটিফিকেশন রিড করা (read) করার জন্য
    markAllRead: builder.mutation({
      query: () => ({
        url: "/notification/mark-all-read",
        method: "PATCH",
      }),
      // এই মিউটেশন চালানোর পর "notification" ট্যাগ ইনভ্যালিডেট হবে, ফলে count এবং notifications list refetch হবে
      invalidatesTags: ["notification"],
    }),
  }),
});

export const {
  useAllNotificationsQuery,
  useNotificationCountQuery,
  useMarkAllReadMutation,
} = notificationsApi;

-------------------------- end ---------------------------------->>


Socket ইন্টিগ্রেশন:
useSocket(handleNewNotification) হুকটি নতুন নোটিফিকেশন পাওয়ার সময় handleNewNotification কল করে, যার মাধ্যমে RTK Query-এর cache (notifications list এবং count) আপডেট করা হচ্ছে।

Badge Animation:
যখন নতুন নোটিফিকেশন আসে, তখন animateBadge স্টেট true করা হয় এবং টেইমআউটের মাধ্যমে ১ সেকেন্ড পরে false করা হয়। এই স্টেটের উপর ভিত্তি করে Tailwind এর animate-bounce ক্লাস প্রয়োগ করা হয়, যাতে ব্যাজটি অ্যানিমেটেড দেখায়।

নেভিগেশন:
ব্যাজের উপর ক্লিক করলে ব্যবহারকারী নোটিফিকেশন পেজে চলে যাবে, যেখানে পরবর্তীতে সব নোটিফিকেশন রিড করা হবে।

-------------------------- start ---------------------------------->>
"use client";

import { logout } from "@/redux/slices/authSlice";
import { Badge, Dropdown, Menu } from "antd";
import Image from "next/image";
import Link from "next/link";
import { usePathname, useRouter } from "next/navigation";
import { useCallback, useState } from "react";
import { FaBars, FaBell, FaTimes } from "react-icons/fa";
import { TiArrowSortedDown } from "react-icons/ti";
import { useSelector } from "react-redux";
import Swal from "sweetalert2";
import main_logo_img from "../../assets/mail_logo_img.png";
import default_img from "../../assets/user_img_default.png";

import { useSocket } from "@/hooks/useSocket";
import {
  notificationsApi,
  useNotificationCountQuery,
} from "@/redux/features/notifications/notificationsApi";
import { useAppDispatch } from "@/redux/hooks";

export default function Navbar() {
  const dispatch = useAppDispatch();
  interface User {
    id: string;
    name: string;
    email: string;
    profileImage?: { url: string };
    // Add other fields as per your user object structure
  }

  const { user } = useSelector(
    (state: { auth: { user: User | null } }) => state.auth
  );
  const { data } = useNotificationCountQuery({});
  const [animateBadge, setAnimateBadge] = useState(false);
  const [isOpen, setIsOpen] = useState(false);
  const pathname = usePathname();
  const router = useRouter();

  // নতুন নোটিফিকেশন এলে RTK Query cache আপডেট করার জন্য ফাংশন
  const handleNewNotification = useCallback(
    (notification: {
      id: string;
      message: string;
      timestamp: string;
      type?: string;
    }) => {
      // notifications list cache আপডেট: নতুন নোটিফিকেশনকে প্রথমে যোগ করা হচ্ছে
      dispatch(
        notificationsApi.util.updateQueryData(
          "allNotifications",
          undefined,
          (draft: {
            data: {
              results: {
                id: string;
                message: string;
                timestamp: string;
                type: string;
              }[];
            };
          }) => {
            draft.data.results.unshift({
              ...notification,
              type: notification.type || "default", // Provide a default value for type
            });
          }
        )
      );
      // notification count cache আপডেট: কাউন্ট ১ বাড়ানো হচ্ছে
      dispatch(
        notificationsApi.util.updateQueryData(
          "notificationCount",
          undefined,
          (draft: { data: { count: number } }) => {
            draft.data.count += 1;
          }
        )
      );

      // ব্যাজ অ্যানিমেশন ট্রিগার করা হচ্ছে
      setAnimateBadge(true);
      setTimeout(() => setAnimateBadge(false), 1000);
    },
    [dispatch]
  );

  // সকার্ট কানেকশন ইনিশিয়ালাইজ করা হচ্ছে
  useSocket(handleNewNotification);

  const toggleMenu = () => {
    setIsOpen(!isOpen);
  };

  const closeMenu = () => {
    setIsOpen(false);
  };

  const navigation = [
    { name: "Home", href: "/" },
    { name: "About", href: "/about" },
    { name: "Venue", href: "/venue" },
  ];

  const isActive = (href: string) =>
    pathname === href || pathname.startsWith(`${href}/`);

  const handleLogout = () => {
    Swal.fire({
      title: "Are you sure?",
      text: "Do you want to logout?",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#3085d6",
      cancelButtonColor: "#d33",
      confirmButtonText: "Yes, logout!",
    }).then((result) => {
      if (result.isConfirmed) {
        Swal.fire({
          title: "Logged out",
          text: "You have successfully logged out.",
          icon: "success",
          confirmButtonColor: "#3085d6",
        }).then(() => {
          dispatch(logout());
          localStorage.removeItem("user_token");
          router.push("/login");
        });
      }
    });
  };

  const ProfileMenu = ({
    handleLogout,
    closeMenu,
  }: {
    handleLogout: () => void;
    closeMenu: () => void;
  }) => (
    <Menu>
      <Menu.Item key="1">
        <Link
          className="font-bold text-primary"
          onClick={closeMenu}
          href="/profile/user"
        >
          My Profile
        </Link>
      </Menu.Item>
      <Menu.Item key="2">
        <div className="font-bold text-red-600" onClick={handleLogout}>
          Logout
        </div>
      </Menu.Item>
    </Menu>
  );

  return (
    <>
      <nav className="bg-hash shadow-2xl fixed w-full py-2 z-50">
        <div className="px-4 md:container">
          <div className="max-w-7xl mx-auto">
            <div className="flex justify-between items-center">
              {/* লোগো */}
              <Link href="/" onClick={closeMenu}>
                <Image
                  className="w-20 h-20"
                  width={1000}
                  height={1000}
                  src={main_logo_img}
                  alt="main_logo"
                />
              </Link>

              {/* ডেস্কটপ মেনু */}
              <div className="hidden md:flex">
                <div
                  className={`flex items-center space-x-2 ${
                    user ? " text-center " : ""
                  }`}
                >
                  {navigation.map((item) => (
                    <Link
                      key={item.name}
                      href={item.href}
                      className={`px-4 font-semibold hover:text-button ${
                        isActive(item.href)
                          ? "text-button underline font-bold"
                          : "text-primary/80"
                      }`}
                    >
                      {item.name}
                    </Link>
                  ))}

                  <Link
                    href="/profile/notifications"
                    className="text-primary hover:text-primary/90 pr-4"
                  >
                    <Badge
                      count={data?.data?.count || 0}
                      overflowCount={99}
                      className={animateBadge ? "animate-bounce" : ""}
                    >
                      <FaBell size={24} />
                    </Badge>
                  </Link>

                  {user ? (
                    <Dropdown
                      overlay={
                        <ProfileMenu
                          closeMenu={closeMenu}
                          handleLogout={handleLogout}
                        />
                      }
                      trigger={["click"]}
                      placement="bottomRight"
                    >
                      <div className="flex justify-center items-center gap-1 cursor-pointer">
                        <Image
                          width={1000}
                          height={1000}
                          className="w-16 h-16 rounded-full border-4 border-primary"
                          src={
                            user?.profileImage?.url
                              ? `${process.env.NEXT_PUBLIC_IMAGE_URL}${
                                  user?.profileImage?.url ?? ""
                                }`
                              : default_img
                          }
                          alt="profile_image"
                        />
                        <TiArrowSortedDown size={20} className="text-white" />
                      </div>
                    </Dropdown>
                  ) : (
                    <Link
                      href="/login"
                      className="px-4 py-2 bg-button text-primary border border-primary rounded-md text-sm font-medium hover:text-primary/90 hover:bg-button/90 transition duration-200"
                    >
                      Login
                    </Link>
                  )}
                </div>
              </div>

              {/* মোবাইল ভিউ */}
              <div className="flex items-center md:hidden">
                <Link
                  href="/profile/notifications"
                  className="text-primary hover:text-primary/90 pr-4"
                >
                  <Badge count={data?.data?.count || 0} overflowCount={99}>
                    <FaBell size={24} />
                  </Badge>
                </Link>
                <button
                  onClick={toggleMenu}
                  type="button"
                  className="inline-flex items-center justify-center p-2 rounded-md text-primary hover:text-button focus:outline-none focus:ring-2 focus:ring-inset focus:ring-primary transition duration-200"
                  aria-controls="mobile-menu"
                  aria-expanded={isOpen}
                  aria-label="Toggle navigation menu"
                >
                  {isOpen ? (
                    <FaTimes className="block h-6 w-6" aria-hidden="true" />
                  ) : (
                    <FaBars className="block h-6 w-6" aria-hidden="true" />
                  )}
                </button>
              </div>
            </div>
          </div>

          {/* মোবাইল মেনু */}
          <div
            className={`fixed inset-0 z-40 md:hidden transition-transform duration-300 ease-in-out ${
              isOpen ? "translate-x-0" : "-translate-x-full"
            }`}
            aria-hidden={!isOpen}
          >
            {/* ওভারলে */}
            <div
              className={`fixed inset-0 bg-black bg-opacity-50 transition-opacity duration-300 ${
                isOpen ? "opacity-100" : "opacity-0 pointer-events-none"
              }`}
              onClick={closeMenu}
              aria-hidden="true"
            ></div>

            {/* সাইডবার */}
            <div
              className={`absolute left-0 top-0 bottom-0 w-64 bg-secondary shadow-lg transform ${
                isOpen ? "translate-x-0" : "-translate-x-full"
              } transition-transform duration-300 ease-in-out`}
            >
              <div className="flex items-center justify-between p-4 border-b border-gray-700">
                <Link
                  href="/"
                  className="text-xl font-bold text-gray-800"
                  onClick={closeMenu}
                >
                  <Image
                    className="w-20 h-20"
                    width={1000}
                    height={1000}
                    src={main_logo_img}
                    alt="main_logo"
                  />
                </Link>
                <button
                  onClick={closeMenu}
                  className="text-primary hover:text-primary/90 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-primary"
                  aria-label="Close menu"
                >
                  <FaTimes size={24} />
                </button>
              </div>

              <nav className="mt-4">
                {navigation.map((item) => (
                  <Link
                    href={item.href}
                    key={item.name}
                    onClick={closeMenu}
                    className={`flex items-center px-6 py-3 mt-2 font-semibold hover:text-button ${
                      isActive(item.href)
                        ? "text-button underline font-bold"
                        : "text-primary/80"
                    }`}
                  >
                    {item.name}
                  </Link>
                ))}
                <hr className="my-4 border-gray-500" />
                {user ? (
                  <Dropdown
                    overlay={
                      <ProfileMenu
                        closeMenu={closeMenu}
                        handleLogout={handleLogout}
                      />
                    }
                    trigger={["click"]}
                    placement="bottomRight"
                  >
                    <div
                      className={`flex justify-start items-center gap-1 px-4 py-2 mt-2 cursor-pointer ${
                        pathname === "/profile/my-profile"
                          ? "text-primary underline font-semibold"
                          : "text-gray-700 hover:text-gray-900"
                      }`}
                    >
                      <Image
                        width={1000}
                        height={1000}
                        className="w-16 h-16 rounded-full border-4 border-primary"
                        src={
                          user?.profileImage?.url
                            ? `${process.env.NEXT_PUBLIC_IMAGE_URL}/${
                                user?.profileImage?.url ?? ""
                              }`
                            : default_img
                        }
                        alt="profile_image"
                      />
                      <TiArrowSortedDown size={20} className="text-white" />
                    </div>
                  </Dropdown>
                ) : (
                  <Link
                    href="/login"
                    onClick={closeMenu}
                    className="block px-6 py-3 mt-2 bg-button text-primary border border-primary rounded-md text-sm font-medium hover:text-white hover:bg-button/90 transition duration-200"
                  >
                    Login
                  </Link>
                )}
              </nav>
            </div>
          </div>
        </div>
      </nav>
    </>
  );
}

-------------------------- end ---------------------------------->>

Mark as Read:
যখন এই কম্পোনেন্ট লোড হয় (নোটিফিকেশন পেজে প্রবেশ করা হলে), markAllRead মিউটেশন কল করা হয় যা ব্যাকএন্ডে রিকোয়েস্ট পাঠায়। ফলে নোটিফিকেশন কাউন্ট রিফেচ হয়ে শূন্য (0) দেখায়।

ডেমো ডেটা:
এখানে ডেমো ডেটা ব্যবহার করা হয়েছে। বাস্তবে, আপনি useAllNotificationsQuery হুকের মাধ্যমে ডেটা ফেচ করবেন।

-------------------------- start ---------------------------------->>
"use client";

import { useMarkAllReadMutation } from "@/redux/features/notifications/notificationsApi";
import { Pagination } from "antd";
import { useRouter } from "next/navigation";
import { useEffect, useState } from "react";
import { IoIosArrowBack } from "react-icons/io";
import { IoNotificationsOutline } from "react-icons/io5";

interface Notification {
  _id: string;
  message: string;
  createdAt: string;
}

export default function Notifications() {
  const router = useRouter();
  const [currentPage, setCurrentPage] = useState<number>(1);

  // কম্পোনেন্ট লোড হলে সব নোটিফিকেশন রিড করার জন্য মিউটেশন কল করা হচ্ছে
  const [markAllRead] = useMarkAllReadMutation();
  useEffect(() => {
    markAllRead({}); // Pass an empty object or the required argument based on your API's expectations
  }, [markAllRead]);

  // ডেমো ডেটার জন্য dummy data ব্যবহার করা হচ্ছে
  const dummyNotifications: Notification[] = [
    {
      _id: "1",
      message: "Your order has been shipped.",
      createdAt: "2023-10-01T12:00:00Z",
    },
    {
      _id: "2",
      message: "New message from support.",
      createdAt: "2023-10-02T14:30:00Z",
    },
    {
      _id: "3",
      message: "Your account has been updated.",
      createdAt: "2023-10-03T09:15:00Z",
    },
    {
      _id: "4",
      message: "Reminder: Your appointment is tomorrow.",
      createdAt: "2023-10-04T18:45:00Z",
    },
    {
      _id: "5",
      message: "Payment received for invoice #12345.",
      createdAt: "2023-10-05T11:00:00Z",
    },
    {
      _id: "6",
      message: "Your subscription is about to expire.",
      createdAt: "2023-10-06T16:20:00Z",
    },
  ];

  // Pagination এর জন্য ডেমো ডেটা ভাগ করা হচ্ছে
  const pageSize = 10;
  const totalData = dummyNotifications.length;
  const paginatedData = dummyNotifications.slice(
    (currentPage - 1) * pageSize,
    currentPage * pageSize
  );

  const handleBack = () => {
    router.back();
  };

  const handlePageChange = (page: number) => {
    setCurrentPage(page);
  };

  return (
    <div className="bg-secondary min-h-screen px-4 py-8 md:py-0">
      {/* হেডার */}
      <div className="sticky top-20 flex justify-start gap-2 bg-primary rounded-t-md h-20 text-black py-8 pl-8 font-bold">
        <button onClick={handleBack}>
          <IoIosArrowBack />
        </button>
        <h2>All Notifications</h2>
      </div>

      {/* নোটিফিকেশনস লিস্ট */}
      <div className="ml-6">
        {paginatedData.length === 0 ? (
          <div className="text-center text-gray-500 mt-4">
            No notifications available
          </div>
        ) : (
          paginatedData.map((notification) => (
            <div
              key={notification._id}
              className="flex justify-start items-center gap-4 m-4"
            >
              <IoNotificationsOutline className="bg-[#E8EAEF] w-[40px] h-[40px] rounded-sm text-secondary p-2" />
              <div>
                <p className="text-xl text-white">{notification.message}</p>
                <p className="text-white">
                  {new Date(notification.createdAt).toLocaleString()}
                </p>
              </div>
            </div>
          ))
        )}
      </div>

      {/* Pagination কম্পোনেন্ট */}
      <div className="flex justify-center mt-4">
        <Pagination
          current={currentPage}
          pageSize={pageSize}
          total={totalData}
          onChange={handlePageChange}
          showSizeChanger={false}
        />
      </div>
    </div>
  );
}

-------------------------- end ---------------------------------->>